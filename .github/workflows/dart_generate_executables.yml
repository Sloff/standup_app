# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Generate Standup Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1.3
      - uses: dart-lang/setup-dart@v1.3

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      # - name: Run tests
      #    run: dart test
      
      - name: Create dir for generated executables
        run: mkdir generate
      
      - name: Generate Windows executable
        run: dart compile exe ./bin/standup_app.dart -o generate/standup.exe
        if: matrix.os == windows-latest
      
      - uses: actions/upload-artifact@v3
        if: matrix.os == windows-latest
        with:
          name: standup
          path: generate/standup.exe
      
      - name: Generate other executable
        run: dart compile exe ./bin/standup_app.dart -o generate/standup
        if: matrix.os != windows-latest
      
      - uses: actions/upload-artifact@v3
        if: matrix.os == windows-latest
        with:
          name: standup
          path: generate/standup
